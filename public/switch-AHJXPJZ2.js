import{f as e}from"./chunk-YTPAW67S.js";var r="* { margin: 0; padding: 0; border: 0; background: transparent; box-sizing: border-box; } body { font-family: var(--font-family); } .position-relative { position: relative; } .flex { display: flex; } .justify-end { justify-content: flex-end; } .fit-content { width: -moz-fit-content; width: fit-content; } .align-center { align-items: center; } .justify-center { justify-content: center; } .flex-row { flex-direction: row; } .flex-column { flex-direction: column; } .flex-grow-1 { flex-grow: 1; } .display-block { display: block; } .justify-space-between { justify-content: space-between; } .gap { gap: 10px; } .width-100p, .w-100p { width: 100%; } .h-100p { height: 100%; } .min-height-100p { min-height: 100%; } .height-100p { height: 100%; } .text-primary { color: var(--text-primary); } .text-secondary { color: var(--text-secondary); } .text-tertiary { color: var(--text-tertiary); } .subtitle { display: block; width: -moz-fit-content; width: fit-content; font-size: 16px; margin-block-start: 0px; margin-block-end: 0px; margin-inline-start: 0px; margin-inline-end: 0px; } huanlin-select:not(.hydrated) *, huanlin-carousel-item:not(.hydrated) *, huanlin-carousel:not(.hydrated) *, huanlin-clock:not(.hydrated) *, huanlin-live-editor:not(.hydrated) *, huanlin-mortgage:not(.hydrated) *, huanlin-home:not(.hydrated) *, huanlin-contact:not(.hydrated) *, huanlin-donut:not(.hydrated) *, huanlin-stacked-bar-chart:not(.hydrated) *, huanlin-group-bar-chart:not(.hydrated) *, huanlin-line-chart:not(.hydrated) *, huanlin-pie-chart:not(.hydrated) *, huanlin-bar-chart:not(.hydrated) *, huanlin-state:not(.hydrated) *, huanlin-table:not(.hydrated) *, huanlin-pin-table:not(.hydrated) *, huanlin-icon:not(.hydrated) *, huanlin-nav:not(.hydrated) *, huanlin-nav-item:not(.hydrated) *, huanlin-carousel:not(.hydrated) *, huanlin-carousel-item:not(.hydrated) *, huanlin-input-range:not(.hydrated) *, huanlin-clock:not(.hydrated) *, huanlin-history:not(.hydrated) *, huanlin-dropdown:not(.hydrated) *, huanlin-menu:not(.hydrated) *, huanlin-menu-item:not(.hydrated) *, huanlin-key-pair:not(.hydrated) *, huanlin-light-dark-mode:not(.hydrated) *, huanlin-load:not(.hydrated) *, huanlin-option:not(.hydrated) *, huanlin-select:not(.hydrated) *, huanlin-title-description:not(.hydrated) *, huanlin-notification:not(.hydrated) *, huanlin-input:not(.hydrated) *, huanlin-stepper:not(.hydrated) *, huanlin-step:not(.hydrated) *, huanlin-step-content:not(.hydrated) *, huanlin-textarea:not(.hydrated) *, huanlin-divider:not(.hydrated) *, huanlin-button:not(.hydrated) *, huanlin-checkbox:not(.hydrated) *, huanlin-tag:not(.hydrated) *, huanlin-progress:not(.hydrated) *, huanlin-breadcrumb:not(.hydrated) *, huanlin-breadcrumb-item:not(.hydrated) *, huanlin-app-two-layout:not(.hydrated) *, huanlin-switch:not(.hydrated) *, huanlin-tablist:not(.hydrated) *, huanlin-tab:not(.hydrated) *, huanlin-tab-panel:not(.hydrated) *, huanlin-app:not(.hydrated) *, huanlin-app-one:not(.hydrated) *, huanlin-page-general:not(.hydrated) *, huanlin-app-two:not(.hydrated) *, huanlin-overview-panel:not(.hydrated) *, huanlin-recipient-activity:not(.hydrated) *, huanlin-portal:not(.hydrated) * { display: none !important; } huanlin-suspense [slot=fallback] huanlin-icon { --height: 40px; --width: 40px; --fill: var(--color-primary); animation: spin 2s linear infinite; } @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } } .root { cursor: pointer; } .root .label { display: inline-block; color: var(--text-secondary); margin-right: 10px; font-size: 14px; } .root .switch { position: relative; border-radius: 12px; height: 20px; width: 40px; background: var(--text-tertiary); } .root .switch span { position: absolute; top: 2px; left: 2px; display: inline-block; border-radius: 8px; height: 16px; width: 16px; background: white; } :host([checked]) .label { color: var(--text-primary); } :host([checked]) .switch { background: var(--color-primary); } :host([checked]) .switch span { left: 22px; }";var o=`<div part="root" class="root flex align-center" role="switch" aria-checked="false" tabindex="0">
  <span part="label" class="label">
    <slot name="label"></slot>
  </span>
  <span part="switch" class="switch flex">
    <span part="dot"></span>
  </span>
</div>`;var i=class extends HTMLElement{constructor(){super();e(this,"handleClick",t=>{this.toggleStatus()});e(this,"handleKeydown",t=>{[" ","Enter"].includes(t.key)&&(t.preventDefault(),this.toggleStatus())});e(this,"toggleStatus",()=>{var a;let t=this.switchEle.getAttribute("aria-checked")==="true",n=String(!t);(a=this.switchEle)==null||a.setAttribute("aria-checked",n),this.checked=!t});e(this,"willLoad",()=>{var t;this.switchEle=(t=this.shadowRoot)==null?void 0:t.querySelector(".switch"),this.addEventListener("click",this.handleClick),this.addEventListener("keydown",this.handleKeydown)});e(this,"render",()=>{var t;(t=this.switchEle)==null||t.setAttribute("aria-checked",this.checked.toString())});let t=this.attachShadow({mode:"open"}),n=new CSSStyleSheet;n.replaceSync(r),t.adoptedStyleSheets=[n],t.innerHTML=o}set name(t){this.setAttribute("name",t)}get name(){return this.getAttribute("name")||""}set checked(t){t?this.setAttribute("checked",""):this.removeAttribute("checked")}get checked(){return!!(this.getAttribute("checked")==="true"||this.hasAttribute("checked"))}static get observedAttributes(){return["checked","name"]}attributeChangedCallback(t,n,a){setTimeout(()=>{this.render()})}connectedCallback(){this.classList.add("hydrated"),this.willLoad(),this.render()}disconnectedCallback(){this.removeEventListener("click",this.handleClick),this.removeEventListener("keydown",this.handleKeydown)}};export{i as default};
