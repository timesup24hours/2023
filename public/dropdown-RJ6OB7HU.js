import{f as i,g as n}from"./chunk-YTPAW67S.js";var a="* { margin: 0; padding: 0; border: 0; background: transparent; box-sizing: border-box; font-family: var(--font-family); } #dropdown { position: relative; display: inline-block; width: 100%; } #trigger { cursor: pointer; width: 100%; color: var(--text-primary); display: flex; flex-direction: row; align-items: center; justify-content: space-between; } #icon { display: none; height: 40px; width: 40px; justify-content: center; align-items: center; } #icon huanlin-icon { --fill: var(--text-primary); --height: 24px; } #popup { display: none; position: absolute; top: 40px; left: 0px; flex-direction: column; background: var(--background-primary); box-shadow: var(--popover-shadow); padding: 10px; width: 100%; border-radius: 4px; gap: 6px; z-index: 1; } #popup.active { display: flex; } :host([arrow]) #icon { display: flex; }";var s=class extends HTMLElement{constructor(){super();i(this,"handleDropdownOpenClose",e=>{let t=this.shadowRoot.querySelector("#popup");t.classList.contains("active")?t.classList.remove("active"):t.classList.add("active");let o=e.target.closest("huanlin-menu-item");o&&(this.setActiveItem(o.name),this.focusTrigger())});i(this,"willLoad",()=>{var e;this.popup=(e=this.shadowRoot)==null?void 0:e.querySelector("#popup"),this.shadowRoot.querySelector("#dropdown").addEventListener("click",this.handleDropdownOpenClose),this.shadowRoot.querySelector("#trigger").addEventListener("keydown",this.handleKeyboard),this.shadowRoot.querySelector("#popup").addEventListener("keydown",this.handleMenuArrow),this.addEventListener("keydown",this.handleCloseKeyboard),document.body.addEventListener("click",this.handleClickOutside)});i(this,"render",()=>{});i(this,"setActiveItem",e=>{Array.from(this.querySelectorAll("huanlin-menu-item")).forEach(r=>{r.name===e?r.setAttribute("active",""):r.removeAttribute("active")})});i(this,"handleMenuArrow",e=>{if(e.key==="ArrowDown"){let t=this.getItems(),o=t.indexOf(e.target)+1;if(o<0||o>=t.length)return;t[o].setFocus()}else if(e.key==="ArrowUp"){let t=this.getItems(),o=t.indexOf(e.target)-1;if(o<0||o>=t.length)return;t[o].setFocus()}else e.key==="Enter"&&(this.setActiveItem(e.target.name),this.hide(),setTimeout(()=>{this.focusTrigger()}))});i(this,"getItems",()=>Array.from(this.querySelectorAll("huanlin-menu-item")));i(this,"handleCloseKeyboard",e=>{e.key==="Escape"?(this.hide(),this.focusTrigger()):(e.key==="Tab"||e.shiftKey&&e.key==="Tab")&&this.hide()});i(this,"focusTrigger",()=>n(this,null,function*(){yield this.querySelector("[slot='trigger']").setFocus()}));i(this,"handleKeyboard",e=>{if(["ArrowDown"," ","Enter"].includes(e.key)){this.show();let t=this.getItems();t.length&&t[0].setFocus()}});i(this,"handleClickOutside",e=>{this.contains(e.target)||this.hide()});i(this,"isOpen",()=>this.popup.classList.contains("active"));i(this,"show",()=>{this.popup.classList.add("active")});i(this,"hide",()=>{this.popup.classList.remove("active")});let e=this.attachShadow({mode:"open"}),t=new CSSStyleSheet;t.replaceSync(a),e.adoptedStyleSheets=[t],e.innerHTML=`
      <div part="root" id="dropdown">
        <div part="trigger" id="trigger" aria-labelledby="label" aria-control="popup">
          <span part="label" id="label">
            <slot name="trigger"></slot>
          </span>
          <span part="icon" id="icon">
            <huanlin-icon name="arrow-down"></huanlin-icon>
          </span>
        </div>
        <div part="popup" id="popup">
          <slot></slot>
        </div>
      </div>
    `}set arrow(e){this.setAttribute("arrow",e)}get arrow(){return!!(this.getAttribute("arrow")==="true"||this.hasAttribute("arrow"))}static get observedAttributes(){return["arrow"]}connectedCallback(){this.classList.add("hydrated"),this.willLoad(),this.render()}disconnectedCallback(){document.body.removeEventListener("click",this.handleClickOutside),this.removeEventListener("keydown",this.handleCloseKeyboard),this.shadowRoot.querySelector("#popup").removeEventListener("keydown",this.handleMenuArrow),this.shadowRoot.querySelector("#dropdown").removeEventListener("click",this.handleDropdownOpenClose),this.shadowRoot.querySelector("#trigger").removeEventListener("keydown",this.handleKeyboard)}};export{s as default};
